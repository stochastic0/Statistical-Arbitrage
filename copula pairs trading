import datetime as dt
import numpy as np
import pandas_datareader.data as web
import matplotlib.pyplot as plt
import pandas as pd
import yfinance as yf
import requests
from bs4 import BeautifulSoup as bs
from scipy.stats import kendalltau, pearsonr, spearmanr
import scipy.stats as stats
from statsmodels.distributions.empirical_distribution import ECDF
import seaborn as sns
import pandas as pd
from pycopula.copula import ArchimedeanCopula
import pycopula as pc
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.stattools import coint
import statsmodels.api as sm


#------------------------------------------티커 리스트----------------------------------------------------------------#

def get_sp500_tickers():
    resp = requests.get('http://en.wikipedia.org/wiki/List_of_S%26P_500_companies')
    soup = bs(resp.text, 'lxml')
    table = soup.find('table', {'class': 'wikitable sortable'})
    tickers = []
    for row in table.findAll('tr')[1:]:
        ticker = row.findAll('td')[0].text
        tickers.append(ticker)

    return tickers

sp500tickers = get_sp500_tickers()

for i in range(0,504):
    sp500tickers[i] = sp500tickers[i][:-1]

sp500tickers.remove("AAPL")


#------------------------------------------------일별 데이터-------------------------------------------------------------


df = yf.download('AAPL',
                      period = '378d',
                      progress=False)
df= df['Close']
dfD = pd.DataFrame(df)
dfD.rename(columns = {'Close':'AAPL close'}, inplace = True)
dfDT = dfD.T

for ticker in sp500tickers:
    df_ = yf.download(ticker,
                      period = '378d',
                      progress=False)
    df_ = df_['Close']
    dfD_ = pd.DataFrame(df_)
    dfD_.rename(columns = {'Close': ticker+' '+'close'}, inplace = True)
    dfD_T = dfD_.T
    dfDT = dfDT.append(dfD_T)

data = dfDT.T
#---------------------------------------로그 수익률 계산-------------------------------------------------------------------#

logreturn = np.log(data['AAPL close']/data['AAPL close'].shift(1))
logreturnDT = pd.DataFrame(logreturn).T

list = data.columns

for ticker in list:
    logreturn1 = np.log(data[ticker]/data[ticker].shift(1))
    logreturn1DT = pd.DataFrame(logreturn1).T
    logreturnDT = logreturnDT.append(logreturn1DT)

logreturn_data = logreturnDT.T
logreturn_data = logreturn_data.dropna(how = 'all')
#-----------------------------------------------spear-man---------------------------------------------------------------

data_frame = pd.DataFrame([['' , '',]],
                   index=[''],
                   columns=['correlation', 'p-value'])

for i in range(1,505):
    for j in range(0,505):
        cor = stats.spearmanr(logreturn_data.iloc[:, [i]], logreturn_data.iloc[:, [j]])
        cor_data = pd.DataFrame(cor)
        cor_trans = cor_data.T
        cor_trans.columns = ['correlation' , 'p-value']
        cor_trans.index = [logreturn_data.columns[i] +' '+'&'+' '+ logreturn_data.columns[j]]
        data_frame = data_frame.append(cor_trans)

data_frame2 = pd.DataFrame([['' , '',]],
                   index=[''],
                   columns=['correlation', 'p-value'])

for i in range (1, 253512):                             #쓰지 않는 페어들
    if data_frame.iloc[i,1] > 0.005:
        Pv = data_frame.iloc[i:i+1]
        data_frame2 = data_frame2.append(Pv)

data_frame3 = pd.DataFrame([['' , '',]],
                   index=[''],
                   columns=['correlation', 'p-value'])

for i in range (1, 253512):                             #사용 될 페어들
    if data_frame.iloc[i,1] < 0.005:
        Pvv = data_frame.iloc[i:i+1]
        data_frame3 = data_frame3.append(Pvv)

data_frame4 = pd.DataFrame([['' , '',]],
                   index=[''],
                   columns=['correlation', 'p-value'])

for i in range(1,234264):
    if data_frame3.iloc[i,0] > 0.8:
        corrr = data_frame3.iloc[i:i+1]
        data_frame4 = data_frame4.append(corrr)


#----------------------------------------------------------cmle-----------------------------------------------------------

AAPL_log = logreturn_data.iloc[:,[0]].dropna()
MMM_log = logreturn_data.iloc[:,[2]].dropna()
data = pd.concat([AAPL_log,MMM_log], axis = 1)
data1 = data.to_numpy()

archimedean = ArchimedeanCopula(family="gumbel", dim=2)
result = archimedean.fit(data1, method="cmle")[0]
