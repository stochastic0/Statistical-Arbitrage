import datetime as dt
import numpy as np
import pandas_datareader.data as web
import matplotlib.pyplot as plt
from arch import arch_model
import pandas as pd
import yfinance as yf

#ticker = '^GSPC'
#start = '2015-12-31'
#end = '2021-06-25'
#prices = yf.download(ticker, start, end)['Close']
#returns = np.array(prices)[1:]/np.array(prices)[:-1] - 1
#returns1 = pd.DataFrame(returns)

df = pd.read_csv("C:/Users/ë‚˜/Downloads/15_min_clean.csv")
#AAPL = df.iloc[:,[4]]
#returns = 100 * AAPL.pct_change().dropna()
AAPL = data['close']
returns = 100 * AAPL.pct_change().dropna()


# Specify GARCH model assumptions
skewt_gm = arch_model(returns, p = 1, q = 1, mean = 'constant', vol = 'GARCH', dist = 'skewt')
# Fit the model
skewt_result = skewt_gm.fit()

# Get model estimated volatility
skewt_vol = skewt_result.conditional_volatility

# Plot model fitting results
plt.plot(skewt_vol, color = 'gold', label = 'Skewed-t Volatility')
plt.plot(returns, color = 'grey',
         label = 'Daily Returns', alpha = 0.4)
plt.legend(loc = 'upper right')
plt.show()

parameters = skewt_result.params
resid = skewt_result.resid
